// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package controller;

import "topo.proto";

option go_package = "github.com/openconfig/kne/proto/controller";

// Topology manager service definition.
service TopologyManager {
  // Creates a topology with and responds with topology name and state.
  rpc CreateTopology(CreateTopologyRequest) returns (CreateTopologyResponse) {}
  // Deletes a topology.
  rpc DeleteTopology(DeleteTopologyRequest) returns (DeleteTopologyResponse) {}
  // Shows the topology info and responds with the current topology state.
  rpc ShowTopology(ShowTopologyRequest) returns (ShowTopologyResponse) {}
  // Creates kind cluster and responds with cluster name and state.
  rpc CreateCluster(CreateClusterRequest) returns (CreateClusterResponse) {}
  // Deletes a kind cluster by cluster name.
  rpc DeleteCluster(DeleteClusterRequest) returns (DeleteClusterResponse) {}
  // Shows cluster state and topologies deployed in the cluster.
  rpc ShowCluster(ShowClusterRequest) returns (ShowClusterResponse) {}
  // Pushes config to a device in a topology.
  rpc PushConfig(PushConfigRequest) returns (PushConfigResponse) {}
  // Resets config of a device in a topology.
  rpc ResetConfig(ResetConfigRequest) returns (ResetConfigResponse) {}
  // Applies kubeyaml to a running cluster.
  rpc ApplyCluster(ApplyClusterRequest) returns (ApplyClusterResponse) {}
  // Joins host into an existing Kubeadm cluster.
  rpc JoinCluster(JoinClusterRequest) returns (JoinClusterResponse) {}
}

// Kind cluster specifications
message KindSpec {
  string name = 1;
  bool recycle = 2;
  string version = 3;
  string image = 4;
  bool retain = 5;
  string kubecfg = 6;
  repeated string google_artifact_registries = 7;
  // container_images is a map of source images to target images for containers
  // to load in the kind cluster. For example:
  // container_images = {
  //   "us-west1-docker.pkg.dev/pkg/a:ga": "pkg/a:latest",
  //   "us-west1-docker.pkg.dev/pkg/b:v0.8.0": "pkg/b:v0.8.0",
  // }
  // Would load images "pkg/a:latest" and "pkg/b:v0.8.0" into the cluster
  // after fetching their source images from "us-west1-docker.pkg.dev".
  map<string, string> container_images = 8;
  string config = 9;
  repeated string additional_manifests = 10;
}

message KubeadmSpec {
  string cri_socket = 1;
  string pod_network_cidr = 2;
  Manifest pod_network_add_on_manifest = 3;
  string token_ttl = 4;
  string network = 5; // name of the docker network to use for ingress
  bool allow_control_plane_scheduling = 6;
  string credential_provider_config = 7;
}

// External cluster specifications
message ExternalSpec {
  string network = 1; // name of the docker network to use for ingress
}

// Metallb specifications
message MetallbSpec {
  string manifest_dir = 1 [deprecated = true];
  int32 ip_count = 2;
  Manifest manifest = 3;
}

// Meshnet specifications
message MeshnetSpec {
  string manifest_dir = 1 [deprecated = true];
  Manifest manifest = 2;
}

// Controller specifications
message ControllerSpec {
  oneof spec {
    IxiaTGSpec ixiatg = 1;
    SRLinuxSpec srlinux = 2;
    CEOSLabSpec ceoslab = 3;
    LemmingSpec lemming = 4;
    CdnosSpec cdnos = 5;
  }
}

// IxiaTG specifications
message IxiaTGSpec {
  string manifest_dir = 1 [deprecated = true];
  IxiaTGConfigMap config_map = 2 [deprecated = true];
  Manifest operator = 3;
  Manifest cfg_map = 4;
}

// IxiaTG config map values
message IxiaTGConfigMap {
  string release = 1;
  repeated IxiaTGImage images = 2;
}

// IxiaTG image identifier
message IxiaTGImage {
  string name = 1;
  string path = 2;
  string tag = 3;
}

// SRLinux specifications
message SRLinuxSpec {
  string manifest_dir = 1 [deprecated = true];
  Manifest operator = 2;
}

// CEOSLab specifications
message CEOSLabSpec {
  string manifest_dir = 1 [deprecated = true];
  Manifest operator = 2;
}

// LemmingSpec specifications
message LemmingSpec {
  string manifest_dir = 1 [deprecated = true];
  Manifest operator = 2;
}

// CdnosSpec specifications
message CdnosSpec {
  Manifest operator = 1;
}

message Manifest {
  oneof manifest_data {
    // Byte data for the manifest.
    bytes data = 101;
    // File is an absolute path to the local manifest file.
    string file = 102;
  }
}

// Request message to create a cluster.
message CreateClusterRequest {
  oneof cluster_spec {
    KindSpec kind = 1;
    ExternalSpec external = 5;
    KubeadmSpec kubeadm = 6;
  }
  oneof ingress_spec {
    MetallbSpec metallb = 2;
  }
  oneof cni_spec {
    MeshnetSpec meshnet = 3;
  }
  repeated ControllerSpec controller_specs = 4;
}

enum ClusterState {
  CLUSTER_STATE_UNSPECIFIED = 0;
  CLUSTER_STATE_CREATING = 1;
  CLUSTER_STATE_RUNNING = 2;
  CLUSTER_STATE_ERROR = 3;
}

// Returns create cluster response.
message CreateClusterResponse {
  string name = 1;
  ClusterState state = 2;
}

// Request message to delete a cluster.
message DeleteClusterRequest {
  string name = 1;
}

// Returns delete cluster response.
message DeleteClusterResponse {
}

// Request message to show cluster by name.
message ShowClusterRequest {
  string name = 1;
}

// Returns show cluster response.
message ShowClusterResponse {
  ClusterState state = 1;
  repeated string topology_names = 2;
  // The following fields are only populated for Kubeadm clusters.
  string api_server_endpoint = 3;
  string token = 4;
  string discovery_token_ca_cert_hash = 5;
  string cri_socket = 6;
}

enum TopologyState {
  TOPOLOGY_STATE_UNSPECIFIED = 0;
  TOPOLOGY_STATE_CREATING = 1;
  TOPOLOGY_STATE_RUNNING = 2;
  TOPOLOGY_STATE_ERROR = 3;
}

// Request message to create a topology.
message CreateTopologyRequest {
  topo.Topology topology = 1;
  string kubecfg = 2;
}

// Returns create topology response.
message CreateTopologyResponse {
  string topology_name = 1 [deprecated=true];
  TopologyState state = 2;
  // topology will return the resolved topology and service mappings.
  topo.Topology topology = 3;
}

// Request message to delete a topology.
message DeleteTopologyRequest {
  string topology_name = 1;
}

// Returns delete topology response.
message DeleteTopologyResponse {
}

// Request message to view topology info.
message ShowTopologyRequest {
  string topology_name = 1;
}

// Returns topology view response.
message ShowTopologyResponse {
  TopologyState state = 1;
  topo.Topology topology = 2;
}

// Request message to push config.
message PushConfigRequest {
  string topology_name = 1;
  string device_name = 2;
  bytes config = 3;
}

// Returns push config response.
message PushConfigResponse {
}

// Request message to reset config.
message ResetConfigRequest {
  string topology_name = 1;
  string device_name = 2;
}

// Returns reset config response.
message ResetConfigResponse {
}

// Request message to apply kubeyaml to a cluster.
message ApplyClusterRequest {
  string name = 1;
  bytes config = 2;
}

// Returns apply cluster response.
message ApplyClusterResponse {
}

// Request message to join in to a Kubeadm cluster.
message JoinClusterRequest {
  string api_server_endpoint = 1;
  string token = 2;
  string discovery_token_ca_cert_hash = 3;
  string cri_socket = 4;
  string credential_provider_config = 5;
}

// Returns join cluster response.
message JoinClusterResponse {
}
