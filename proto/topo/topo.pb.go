// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v6.31.1
// source: topo.proto

package topo

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Vendor of the node. Topology manager uses this enum to dispatch the node to
// the correct controller.
type Vendor int32

const (
	Vendor_UNKNOWN    Vendor = 0
	Vendor_HOST       Vendor = 1
	Vendor_ARISTA     Vendor = 2
	Vendor_CISCO      Vendor = 3
	Vendor_JUNIPER    Vendor = 4
	Vendor_KEYSIGHT   Vendor = 5
	Vendor_FRR        Vendor = 6
	Vendor_QUAGGA     Vendor = 7
	Vendor_GOBGP      Vendor = 8
	Vendor_NOKIA      Vendor = 9
	Vendor_OPENCONFIG Vendor = 10
	Vendor_ALPINE     Vendor = 11
	Vendor_DRIVENETS  Vendor = 12
	Vendor_FORWARD    Vendor = 13
)

// Enum value maps for Vendor.
var (
	Vendor_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "HOST",
		2:  "ARISTA",
		3:  "CISCO",
		4:  "JUNIPER",
		5:  "KEYSIGHT",
		6:  "FRR",
		7:  "QUAGGA",
		8:  "GOBGP",
		9:  "NOKIA",
		10: "OPENCONFIG",
		11: "ALPINE",
		12: "DRIVENETS",
		13: "FORWARD",
	}
	Vendor_value = map[string]int32{
		"UNKNOWN":    0,
		"HOST":       1,
		"ARISTA":     2,
		"CISCO":      3,
		"JUNIPER":    4,
		"KEYSIGHT":   5,
		"FRR":        6,
		"QUAGGA":     7,
		"GOBGP":      8,
		"NOKIA":      9,
		"OPENCONFIG": 10,
		"ALPINE":     11,
		"DRIVENETS":  12,
		"FORWARD":    13,
	}
)

func (x Vendor) Enum() *Vendor {
	p := new(Vendor)
	*p = x
	return p
}

func (x Vendor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Vendor) Descriptor() protoreflect.EnumDescriptor {
	return file_topo_proto_enumTypes[0].Descriptor()
}

func (Vendor) Type() protoreflect.EnumType {
	return &file_topo_proto_enumTypes[0]
}

func (x Vendor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Vendor.Descriptor instead.
func (Vendor) EnumDescriptor() ([]byte, []int) {
	return file_topo_proto_rawDescGZIP(), []int{0}
}

type Node_Type int32

const (
	Node_UNKNOWN      Node_Type = 0
	Node_HOST         Node_Type = 1
	Node_ARISTA_CEOS  Node_Type = 2
	Node_JUNIPER_CEVO Node_Type = 3
	Node_CISCO_CXR    Node_Type = 4
	Node_QUAGGA       Node_Type = 5
	Node_FRR          Node_Type = 6
	Node_JUNIPER_VMX  Node_Type = 7
	Node_CISCO_CSR    Node_Type = 8
	Node_NOKIA_SRL    Node_Type = 9
	Node_IXIA_TG      Node_Type = 10
	Node_GOBGP        Node_Type = 11
	Node_CISCO_XRD    Node_Type = 12
	Node_CISCO_E8000  Node_Type = 13
	Node_LEMMING      Node_Type = 14
)

// Enum value maps for Node_Type.
var (
	Node_Type_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "HOST",
		2:  "ARISTA_CEOS",
		3:  "JUNIPER_CEVO",
		4:  "CISCO_CXR",
		5:  "QUAGGA",
		6:  "FRR",
		7:  "JUNIPER_VMX",
		8:  "CISCO_CSR",
		9:  "NOKIA_SRL",
		10: "IXIA_TG",
		11: "GOBGP",
		12: "CISCO_XRD",
		13: "CISCO_E8000",
		14: "LEMMING",
	}
	Node_Type_value = map[string]int32{
		"UNKNOWN":      0,
		"HOST":         1,
		"ARISTA_CEOS":  2,
		"JUNIPER_CEVO": 3,
		"CISCO_CXR":    4,
		"QUAGGA":       5,
		"FRR":          6,
		"JUNIPER_VMX":  7,
		"CISCO_CSR":    8,
		"NOKIA_SRL":    9,
		"IXIA_TG":      10,
		"GOBGP":        11,
		"CISCO_XRD":    12,
		"CISCO_E8000":  13,
		"LEMMING":      14,
	}
)

func (x Node_Type) Enum() *Node_Type {
	p := new(Node_Type)
	*p = x
	return p
}

func (x Node_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Node_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_topo_proto_enumTypes[1].Descriptor()
}

func (Node_Type) Type() protoreflect.EnumType {
	return &file_topo_proto_enumTypes[1]
}

func (x Node_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Node_Type.Descriptor instead.
func (Node_Type) EnumDescriptor() ([]byte, []int) {
	return file_topo_proto_rawDescGZIP(), []int{1, 0}
}

type Interface_InterfaceType int32

const (
	Interface_UNKNOWN    Interface_InterfaceType = 0
	Interface_LOOPBACK   Interface_InterfaceType = 1
	Interface_MANAGEMENT Interface_InterfaceType = 2
	Interface_DATA       Interface_InterfaceType = 3
)

// Enum value maps for Interface_InterfaceType.
var (
	Interface_InterfaceType_name = map[int32]string{
		0: "UNKNOWN",
		1: "LOOPBACK",
		2: "MANAGEMENT",
		3: "DATA",
	}
	Interface_InterfaceType_value = map[string]int32{
		"UNKNOWN":    0,
		"LOOPBACK":   1,
		"MANAGEMENT": 2,
		"DATA":       3,
	}
)

func (x Interface_InterfaceType) Enum() *Interface_InterfaceType {
	p := new(Interface_InterfaceType)
	*p = x
	return p
}

func (x Interface_InterfaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Interface_InterfaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_topo_proto_enumTypes[2].Descriptor()
}

func (Interface_InterfaceType) Type() protoreflect.EnumType {
	return &file_topo_proto_enumTypes[2]
}

func (x Interface_InterfaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Interface_InterfaceType.Descriptor instead.
func (Interface_InterfaceType) EnumDescriptor() ([]byte, []int) {
	return file_topo_proto_rawDescGZIP(), []int{5, 0}
}

// Topology message defines what nodes and links will be created
// inside the mesh.
type Topology struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`   // Name of the topology - will be linked to the cluster name
	Nodes []*Node `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"` // List of nodes in the topology
	Links []*Link `protobuf:"bytes,3,rep,name=links,proto3" json:"links,omitempty"` // connections between Nodes.
}

func (x *Topology) Reset() {
	*x = Topology{}
	if protoimpl.UnsafeEnabled {
		mi := &file_topo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Topology) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Topology) ProtoMessage() {}

func (x *Topology) ProtoReflect() protoreflect.Message {
	mi := &file_topo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Topology.ProtoReflect.Descriptor instead.
func (*Topology) Descriptor() ([]byte, []int) {
	return file_topo_proto_rawDescGZIP(), []int{0}
}

func (x *Topology) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Topology) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *Topology) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

// Node is a single container inside the topology
type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // Name of the node in the topology. Must be unique.
	// Deprecated: Marked as deprecated in topo.proto.
	Type   Node_Type         `protobuf:"varint,2,opt,name=type,proto3,enum=topo.Node_Type" json:"type,omitempty"`
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Metadata labels describing the node.
	Config *Config           `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`                                                                                         // Pod specific configuration of the node.
	// Map of services to enable on the node.
	// The key is the external load balancer port to be used by the service.
	// Multiple external services can be mapped to a single internal service port
	// by reusing the inside_port in the service definition.
	Services    map[uint32]*Service `protobuf:"bytes,6,rep,name=services,proto3" json:"services,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Constraints map[string]string   `protobuf:"bytes,7,rep,name=constraints,proto3" json:"constraints,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Any k8s constraints required by node.
	Vendor      Vendor              `protobuf:"varint,8,opt,name=vendor,proto3,enum=topo.Vendor" json:"vendor,omitempty"`                                                                                 // Vendor enum replaces type.
	Model       string              `protobuf:"bytes,9,opt,name=model,proto3" json:"model,omitempty"`                                                                                                     // Model of the node.
	Version     string              `protobuf:"bytes,10,opt,name=version,proto3" json:"version,omitempty"`                                                                                                // Version string used to identify a software release.
	Os          string              `protobuf:"bytes,11,opt,name=os,proto3" json:"os,omitempty"`                                                                                                          // Operating system type.
	// Interfaces is a map of container interfaces used by the node.
	// If interfaces is empty the interfaces defined in the links portion of the
	// topology will be populated into the node.
	Interfaces map[string]*Interface `protobuf:"bytes,12,rep,name=interfaces,proto3" json:"interfaces,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Any host constraints required by the node. These may not be required by a
	// vendor, but it can be used to provide requirements for the node.
	HostConstraints []*HostConstraint `protobuf:"bytes,13,rep,name=host_constraints,json=hostConstraints,proto3" json:"host_constraints,omitempty"`
	// Assigned by KNE.
	// Cluster-internal IP assigned by Kubernetes for the pod.
	// This IP comes from the worker node's IP pool.
	PodIp string `protobuf:"bytes,14,opt,name=pod_ip,json=podIp,proto3" json:"pod_ip,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_topo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_topo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_topo_proto_rawDescGZIP(), []int{1}
}

func (x *Node) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Deprecated: Marked as deprecated in topo.proto.
func (x *Node) GetType() Node_Type {
	if x != nil {
		return x.Type
	}
	return Node_UNKNOWN
}

func (x *Node) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Node) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Node) GetServices() map[uint32]*Service {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *Node) GetConstraints() map[string]string {
	if x != nil {
		return x.Constraints
	}
	return nil
}

func (x *Node) GetVendor() Vendor {
	if x != nil {
		return x.Vendor
	}
	return Vendor_UNKNOWN
}

func (x *Node) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Node) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Node) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *Node) GetInterfaces() map[string]*Interface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *Node) GetHostConstraints() []*HostConstraint {
	if x != nil {
		return x.HostConstraints
	}
	return nil
}

func (x *Node) GetPodIp() string {
	if x != nil {
		return x.PodIp
	}
	return ""
}

// HostConstraint is a constraint on the host where the node is running.
type HostConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Constraint:
	//
	//	*HostConstraint_KernelConstraint
	Constraint isHostConstraint_Constraint `protobuf_oneof:"constraint"`
}

func (x *HostConstraint) Reset() {
	*x = HostConstraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_topo_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostConstraint) ProtoMessage() {}

func (x *HostConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_topo_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostConstraint.ProtoReflect.Descriptor instead.
func (*HostConstraint) Descriptor() ([]byte, []int) {
	return file_topo_proto_rawDescGZIP(), []int{2}
}

func (m *HostConstraint) GetConstraint() isHostConstraint_Constraint {
	if m != nil {
		return m.Constraint
	}
	return nil
}

func (x *HostConstraint) GetKernelConstraint() *KernelParam {
	if x, ok := x.GetConstraint().(*HostConstraint_KernelConstraint); ok {
		return x.KernelConstraint
	}
	return nil
}

type isHostConstraint_Constraint interface {
	isHostConstraint_Constraint()
}

type HostConstraint_KernelConstraint struct {
	// Includes the required kernel parameters that need to be configured.
	KernelConstraint *KernelParam `protobuf:"bytes,1,opt,name=kernel_constraint,json=kernelConstraint,proto3,oneof"`
}

func (*HostConstraint_KernelConstraint) isHostConstraint_Constraint() {}

// KernelParam is a parameter on the host kernel.
type KernelParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MIB style name of the kernel state to constrain.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to ConstraintType:
	//
	//	*KernelParam_BoundedInteger
	ConstraintType isKernelParam_ConstraintType `protobuf_oneof:"ConstraintType"`
}

func (x *KernelParam) Reset() {
	*x = KernelParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_topo_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KernelParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KernelParam) ProtoMessage() {}

func (x *KernelParam) ProtoReflect() protoreflect.Message {
	mi := &file_topo_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KernelParam.ProtoReflect.Descriptor instead.
func (*KernelParam) Descriptor() ([]byte, []int) {
	return file_topo_proto_rawDescGZIP(), []int{3}
}

func (x *KernelParam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *KernelParam) GetConstraintType() isKernelParam_ConstraintType {
	if m != nil {
		return m.ConstraintType
	}
	return nil
}

func (x *KernelParam) GetBoundedInteger() *BoundedInteger {
	if x, ok := x.GetConstraintType().(*KernelParam_BoundedInteger); ok {
		return x.BoundedInteger
	}
	return nil
}

type isKernelParam_ConstraintType interface {
	isKernelParam_ConstraintType()
}

type KernelParam_BoundedInteger struct {
	BoundedInteger *BoundedInteger `protobuf:"bytes,2,opt,name=bounded_integer,json=boundedInteger,proto3,oneof"`
}

func (*KernelParam_BoundedInteger) isKernelParam_ConstraintType() {}

// BoundedInteger to capture the range of max or min for a particular
// constraint.
type BoundedInteger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxValue int64 `protobuf:"varint,1,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
	MinValue int64 `protobuf:"varint,2,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
}

func (x *BoundedInteger) Reset() {
	*x = BoundedInteger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_topo_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoundedInteger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoundedInteger) ProtoMessage() {}

func (x *BoundedInteger) ProtoReflect() protoreflect.Message {
	mi := &file_topo_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoundedInteger.ProtoReflect.Descriptor instead.
func (*BoundedInteger) Descriptor() ([]byte, []int) {
	return file_topo_proto_rawDescGZIP(), []int{4}
}

func (x *BoundedInteger) GetMaxValue() int64 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

func (x *BoundedInteger) GetMinValue() int64 {
	if x != nil {
		return x.MinValue
	}
	return 0
}

// Interface keys must be the same as the links a,z int.
type Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the interface provided by Node implementation. This will be used
	// to map the int_name into a vendor specific interface name. Vendor operators
	// should provide the name mapping from the node interface key to this vendor
	// specific name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Internal device name. This name matches the key in the Node interface map.
	// It will be returned by the operator. Assigned by KNE.
	IntName string `protobuf:"bytes,2,opt,name=int_name,json=intName,proto3" json:"int_name,omitempty"`
	Mtu     uint32 `protobuf:"varint,3,opt,name=mtu,proto3" json:"mtu,omitempty"` // Desired MTU for the interface.
	// Peer node name. Assigned by KNE.
	PeerName string `protobuf:"bytes,4,opt,name=peer_name,json=peerName,proto3" json:"peer_name,omitempty"`
	// Peer interface name. Assigned by KNE.
	PeerIntName string `protobuf:"bytes,5,opt,name=peer_int_name,json=peerIntName,proto3" json:"peer_int_name,omitempty"`
	// Uid is the internal link identifier used by Meshnet.
	Uid int64 `protobuf:"varint,6,opt,name=uid,proto3" json:"uid,omitempty"`
	// Name of group to which this interface belongs
	Group string `protobuf:"bytes,7,opt,name=group,proto3" json:"group,omitempty"`
	// Type of the interface - Loopback, Management , Data etc.
	Type Interface_InterfaceType `protobuf:"varint,8,opt,name=type,proto3,enum=topo.Interface_InterfaceType" json:"type,omitempty"`
	// ip_address associated with the interface.
	IpAddress string `protobuf:"bytes,9,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
}

func (x *Interface) Reset() {
	*x = Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_topo_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interface) ProtoMessage() {}

func (x *Interface) ProtoReflect() protoreflect.Message {
	mi := &file_topo_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interface.ProtoReflect.Descriptor instead.
func (*Interface) Descriptor() ([]byte, []int) {
	return file_topo_proto_rawDescGZIP(), []int{5}
}

func (x *Interface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Interface) GetIntName() string {
	if x != nil {
		return x.IntName
	}
	return ""
}

func (x *Interface) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *Interface) GetPeerName() string {
	if x != nil {
		return x.PeerName
	}
	return ""
}

func (x *Interface) GetPeerIntName() string {
	if x != nil {
		return x.PeerIntName
	}
	return ""
}

func (x *Interface) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *Interface) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *Interface) GetType() Interface_InterfaceType {
	if x != nil {
		return x.Type
	}
	return Interface_UNKNOWN
}

func (x *Interface) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

// Link is single link between nodes in the topology.
// Interfaces must start eth1 - eth0 is the default k8s interface.
type Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ANode string `protobuf:"bytes,1,opt,name=a_node,json=aNode,proto3" json:"a_node,omitempty"`
	AInt  string `protobuf:"bytes,2,opt,name=a_int,json=aInt,proto3" json:"a_int,omitempty"`
	ZNode string `protobuf:"bytes,3,opt,name=z_node,json=zNode,proto3" json:"z_node,omitempty"`
	ZInt  string `protobuf:"bytes,4,opt,name=z_int,json=zInt,proto3" json:"z_int,omitempty"`
}

func (x *Link) Reset() {
	*x = Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_topo_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_topo_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link.ProtoReflect.Descriptor instead.
func (*Link) Descriptor() ([]byte, []int) {
	return file_topo_proto_rawDescGZIP(), []int{6}
}

func (x *Link) GetANode() string {
	if x != nil {
		return x.ANode
	}
	return ""
}

func (x *Link) GetAInt() string {
	if x != nil {
		return x.AInt
	}
	return ""
}

func (x *Link) GetZNode() string {
	if x != nil {
		return x.ZNode
	}
	return ""
}

func (x *Link) GetZInt() string {
	if x != nil {
		return x.ZInt
	}
	return ""
}

// Config is the k8s pod specific configuration for a node.
type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command []string `protobuf:"bytes,1,rep,name=command,proto3" json:"command,omitempty"` // Command to pass into pod.
	Args    []string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`       // Command args to pass into the pod.
	Image   string   `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`     // Docker image to use with pod.
	// Map of environment variables to pass into the pod.
	Env map[string]string `protobuf:"bytes,4,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Specific entry point command for accessing the pod.
	EntryCommand string `protobuf:"bytes,5,opt,name=entry_command,json=entryCommand,proto3" json:"entry_command,omitempty"`
	// Mount point for configuration inside the pod.
	ConfigPath string `protobuf:"bytes,6,opt,name=config_path,json=configPath,proto3" json:"config_path,omitempty"`
	// Default configuration file name for the pod.
	ConfigFile string `protobuf:"bytes,7,opt,name=config_file,json=configFile,proto3" json:"config_file,omitempty"`
	Sleep      uint32 `protobuf:"varint,8,opt,name=sleep,proto3" json:"sleep,omitempty"` // Sleeptime before starting the pod.
	// Certificate configuration
	Cert *CertificateCfg `protobuf:"bytes,9,opt,name=cert,proto3" json:"cert,omitempty"`
	// Types that are assignable to ConfigData:
	//
	//	*Config_Data
	//	*Config_File
	ConfigData isConfig_ConfigData `protobuf_oneof:"config_data"`
	// Docker image to use as an init container for the pod.
	InitImage string `protobuf:"bytes,10,opt,name=init_image,json=initImage,proto3" json:"init_image,omitempty"`
	// Vendor-specific data
	VendorData *anypb.Any `protobuf:"bytes,11,opt,name=vendor_data,json=vendorData,proto3" json:"vendor_data,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_topo_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_topo_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_topo_proto_rawDescGZIP(), []int{7}
}

func (x *Config) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *Config) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Config) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Config) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *Config) GetEntryCommand() string {
	if x != nil {
		return x.EntryCommand
	}
	return ""
}

func (x *Config) GetConfigPath() string {
	if x != nil {
		return x.ConfigPath
	}
	return ""
}

func (x *Config) GetConfigFile() string {
	if x != nil {
		return x.ConfigFile
	}
	return ""
}

func (x *Config) GetSleep() uint32 {
	if x != nil {
		return x.Sleep
	}
	return 0
}

func (x *Config) GetCert() *CertificateCfg {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (m *Config) GetConfigData() isConfig_ConfigData {
	if m != nil {
		return m.ConfigData
	}
	return nil
}

func (x *Config) GetData() []byte {
	if x, ok := x.GetConfigData().(*Config_Data); ok {
		return x.Data
	}
	return nil
}

func (x *Config) GetFile() string {
	if x, ok := x.GetConfigData().(*Config_File); ok {
		return x.File
	}
	return ""
}

func (x *Config) GetInitImage() string {
	if x != nil {
		return x.InitImage
	}
	return ""
}

func (x *Config) GetVendorData() *anypb.Any {
	if x != nil {
		return x.VendorData
	}
	return nil
}

type isConfig_ConfigData interface {
	isConfig_ConfigData()
}

type Config_Data struct {
	// Byte data for the startup configuration file.
	Data []byte `protobuf:"bytes,101,opt,name=data,proto3,oneof"`
}

type Config_File struct {
	// File is always relative to the topology configuration file.
	File string `protobuf:"bytes,102,opt,name=file,proto3,oneof"`
}

func (*Config_Data) isConfig_ConfigData() {}

func (*Config_File) isConfig_ConfigData() {}

type CertificateCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Config:
	//
	//	*CertificateCfg_SelfSigned
	Config isCertificateCfg_Config `protobuf_oneof:"config"`
}

func (x *CertificateCfg) Reset() {
	*x = CertificateCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_topo_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateCfg) ProtoMessage() {}

func (x *CertificateCfg) ProtoReflect() protoreflect.Message {
	mi := &file_topo_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateCfg.ProtoReflect.Descriptor instead.
func (*CertificateCfg) Descriptor() ([]byte, []int) {
	return file_topo_proto_rawDescGZIP(), []int{8}
}

func (m *CertificateCfg) GetConfig() isCertificateCfg_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *CertificateCfg) GetSelfSigned() *SelfSignedCertCfg {
	if x, ok := x.GetConfig().(*CertificateCfg_SelfSigned); ok {
		return x.SelfSigned
	}
	return nil
}

type isCertificateCfg_Config interface {
	isCertificateCfg_Config()
}

type CertificateCfg_SelfSigned struct {
	// self_signed will generate local certificates on the node.
	SelfSigned *SelfSignedCertCfg `protobuf:"bytes,1,opt,name=self_signed,json=selfSigned,proto3,oneof"`
}

func (*CertificateCfg_SelfSigned) isCertificateCfg_Config() {}

type SelfSignedCertCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Certificate name on the node.
	CertName string `protobuf:"bytes,1,opt,name=cert_name,json=certName,proto3" json:"cert_name,omitempty"`
	// Key name on the node.
	KeyName string `protobuf:"bytes,2,opt,name=key_name,json=keyName,proto3" json:"key_name,omitempty"`
	// RSA keysize to use for key generation.
	KeySize uint32 `protobuf:"varint,3,opt,name=key_size,json=keySize,proto3" json:"key_size,omitempty"`
	// Common name to set in the cert.
	CommonName string `protobuf:"bytes,4,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
}

func (x *SelfSignedCertCfg) Reset() {
	*x = SelfSignedCertCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_topo_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelfSignedCertCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfSignedCertCfg) ProtoMessage() {}

func (x *SelfSignedCertCfg) ProtoReflect() protoreflect.Message {
	mi := &file_topo_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfSignedCertCfg.ProtoReflect.Descriptor instead.
func (*SelfSignedCertCfg) Descriptor() ([]byte, []int) {
	return file_topo_proto_rawDescGZIP(), []int{9}
}

func (x *SelfSignedCertCfg) GetCertName() string {
	if x != nil {
		return x.CertName
	}
	return ""
}

func (x *SelfSignedCertCfg) GetKeyName() string {
	if x != nil {
		return x.KeyName
	}
	return ""
}

func (x *SelfSignedCertCfg) GetKeySize() uint32 {
	if x != nil {
		return x.KeySize
	}
	return 0
}

func (x *SelfSignedCertCfg) GetCommonName() string {
	if x != nil {
		return x.CommonName
	}
	return ""
}

// Service is k8s Service to exposed to the cluster. The initial input can be
// provided by the user for which services they would like exposed. Once the
// service is created KNE will fill in the outside information for the user to
// access the services.
// The user should specify inside port for this is the port the container will
// listen on.
type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`      // Name of the service (optional)
	Inside uint32 `protobuf:"varint,2,opt,name=inside,proto3" json:"inside,omitempty"` // Inside port to map Node (container listening port)
	// Assigned by KNE.
	Outside   uint32 `protobuf:"varint,3,opt,name=outside,proto3" json:"outside,omitempty"`                     // Outside port used by service. (same a service key)
	OutsideIp string `protobuf:"bytes,5,opt,name=outside_ip,json=outsideIp,proto3" json:"outside_ip,omitempty"` // External IP assigned by cluster load balancer.
	// Used internally by KNE.
	InsideIp string `protobuf:"bytes,4,opt,name=inside_ip,json=insideIp,proto3" json:"inside_ip,omitempty"`  // Cluster IP for the service.
	NodePort uint32 `protobuf:"varint,6,opt,name=node_port,json=nodePort,proto3" json:"node_port,omitempty"` // Port on the K8s worker node used by the cluster.
	// List of service names to be mapped to the port (optional).
	// If only one field out of "name" or "names" is provided in the input topo,
	// the unspecified field is ignored.
	// If both are provided, names in both fields are considered excluding any
	// duplicate values.
	Names []string `protobuf:"bytes,7,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *Service) Reset() {
	*x = Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_topo_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_topo_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_topo_proto_rawDescGZIP(), []int{10}
}

func (x *Service) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Service) GetInside() uint32 {
	if x != nil {
		return x.Inside
	}
	return 0
}

func (x *Service) GetOutside() uint32 {
	if x != nil {
		return x.Outside
	}
	return 0
}

func (x *Service) GetOutsideIp() string {
	if x != nil {
		return x.OutsideIp
	}
	return ""
}

func (x *Service) GetInsideIp() string {
	if x != nil {
		return x.InsideIp
	}
	return ""
}

func (x *Service) GetNodePort() uint32 {
	if x != nil {
		return x.NodePort
	}
	return 0
}

func (x *Service) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

var File_topo_proto protoreflect.FileDescriptor

var file_topo_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x74, 0x6f,
	0x70, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x62, 0x0a,
	0x08, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74,
	0x6f, 0x70, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x20, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x22, 0x80, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x74,
	0x6f, 0x70, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74,
	0x6f, 0x70, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x10, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x52, 0x0f, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x6f, 0x64, 0x5f, 0x69, 0x70, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x70, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4a, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x6f, 0x70, 0x6f,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x4e, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xd8, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f, 0x53,
	0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x52, 0x49, 0x53, 0x54, 0x41, 0x5f, 0x43, 0x45,
	0x4f, 0x53, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4a, 0x55, 0x4e, 0x49, 0x50, 0x45, 0x52, 0x5f,
	0x43, 0x45, 0x56, 0x4f, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x49, 0x53, 0x43, 0x4f, 0x5f,
	0x43, 0x58, 0x52, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x51, 0x55, 0x41, 0x47, 0x47, 0x41, 0x10,
	0x05, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x52, 0x52, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x4a, 0x55,
	0x4e, 0x49, 0x50, 0x45, 0x52, 0x5f, 0x56, 0x4d, 0x58, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x43,
	0x49, 0x53, 0x43, 0x4f, 0x5f, 0x43, 0x53, 0x52, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f,
	0x4b, 0x49, 0x41, 0x5f, 0x53, 0x52, 0x4c, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x58, 0x49,
	0x41, 0x5f, 0x54, 0x47, 0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x4f, 0x42, 0x47, 0x50, 0x10,
	0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x49, 0x53, 0x43, 0x4f, 0x5f, 0x58, 0x52, 0x44, 0x10, 0x0c,
	0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x49, 0x53, 0x43, 0x4f, 0x5f, 0x45, 0x38, 0x30, 0x30, 0x30, 0x10,
	0x0d, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x45, 0x4d, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x0e, 0x4a, 0x04,
	0x08, 0x03, 0x10, 0x04, 0x22, 0x60, 0x0a, 0x0e, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x11, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x10, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x22, 0x74, 0x0a, 0x0b, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0f, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x65,
	0x64, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x42, 0x10, 0x0a, 0x0e, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4a, 0x0a, 0x0e,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xcd, 0x02, 0x0a, 0x09, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x65,
	0x72, 0x49, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x44, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x08,
	0x0a, 0x04, 0x44, 0x41, 0x54, 0x41, 0x10, 0x03, 0x22, 0x5e, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x15, 0x0a, 0x06, 0x61, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x61, 0x5f, 0x69, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x49, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x7a, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x7a, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x7a, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x7a, 0x49, 0x6e, 0x74, 0x22, 0xe5, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x6e, 0x76,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x12, 0x28, 0x0a,
	0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x6f,
	0x70, 0x6f, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x66,
	0x67, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0a, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x6e, 0x76,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x56, 0x0a, 0x0e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43,
	0x66, 0x67, 0x12, 0x3a, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x2e, 0x53,
	0x65, 0x6c, 0x66, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x43, 0x66, 0x67,
	0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x08,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x87, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x6c,
	0x66, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x43, 0x66, 0x67, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x65, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6b,
	0x65, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b,
	0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75,
	0x74, 0x73, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x75, 0x74,
	0x73, 0x69, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x5f,
	0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64,
	0x65, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x49, 0x70,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x2a, 0xb4, 0x01, 0x0a, 0x06, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48,
	0x4f, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x52, 0x49, 0x53, 0x54, 0x41, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x49, 0x53, 0x43, 0x4f, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x4a, 0x55, 0x4e, 0x49, 0x50, 0x45, 0x52, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x4b, 0x45, 0x59,
	0x53, 0x49, 0x47, 0x48, 0x54, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x52, 0x52, 0x10, 0x06,
	0x12, 0x0a, 0x0a, 0x06, 0x51, 0x55, 0x41, 0x47, 0x47, 0x41, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05,
	0x47, 0x4f, 0x42, 0x47, 0x50, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x4f, 0x4b, 0x49, 0x41,
	0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4c, 0x50, 0x49, 0x4e, 0x45, 0x10, 0x0b, 0x12, 0x0d,
	0x0a, 0x09, 0x44, 0x52, 0x49, 0x56, 0x45, 0x4e, 0x45, 0x54, 0x53, 0x10, 0x0c, 0x12, 0x0b, 0x0a,
	0x07, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x10, 0x0d, 0x42, 0x26, 0x5a, 0x24, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x6b, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x6f,
	0x70, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_topo_proto_rawDescOnce sync.Once
	file_topo_proto_rawDescData = file_topo_proto_rawDesc
)

func file_topo_proto_rawDescGZIP() []byte {
	file_topo_proto_rawDescOnce.Do(func() {
		file_topo_proto_rawDescData = protoimpl.X.CompressGZIP(file_topo_proto_rawDescData)
	})
	return file_topo_proto_rawDescData
}

var file_topo_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_topo_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_topo_proto_goTypes = []interface{}{
	(Vendor)(0),                  // 0: topo.Vendor
	(Node_Type)(0),               // 1: topo.Node.Type
	(Interface_InterfaceType)(0), // 2: topo.Interface.InterfaceType
	(*Topology)(nil),             // 3: topo.Topology
	(*Node)(nil),                 // 4: topo.Node
	(*HostConstraint)(nil),       // 5: topo.HostConstraint
	(*KernelParam)(nil),          // 6: topo.KernelParam
	(*BoundedInteger)(nil),       // 7: topo.BoundedInteger
	(*Interface)(nil),            // 8: topo.Interface
	(*Link)(nil),                 // 9: topo.Link
	(*Config)(nil),               // 10: topo.Config
	(*CertificateCfg)(nil),       // 11: topo.CertificateCfg
	(*SelfSignedCertCfg)(nil),    // 12: topo.SelfSignedCertCfg
	(*Service)(nil),              // 13: topo.Service
	nil,                          // 14: topo.Node.LabelsEntry
	nil,                          // 15: topo.Node.ServicesEntry
	nil,                          // 16: topo.Node.ConstraintsEntry
	nil,                          // 17: topo.Node.InterfacesEntry
	nil,                          // 18: topo.Config.EnvEntry
	(*anypb.Any)(nil),            // 19: google.protobuf.Any
}
var file_topo_proto_depIdxs = []int32{
	4,  // 0: topo.Topology.nodes:type_name -> topo.Node
	9,  // 1: topo.Topology.links:type_name -> topo.Link
	1,  // 2: topo.Node.type:type_name -> topo.Node.Type
	14, // 3: topo.Node.labels:type_name -> topo.Node.LabelsEntry
	10, // 4: topo.Node.config:type_name -> topo.Config
	15, // 5: topo.Node.services:type_name -> topo.Node.ServicesEntry
	16, // 6: topo.Node.constraints:type_name -> topo.Node.ConstraintsEntry
	0,  // 7: topo.Node.vendor:type_name -> topo.Vendor
	17, // 8: topo.Node.interfaces:type_name -> topo.Node.InterfacesEntry
	5,  // 9: topo.Node.host_constraints:type_name -> topo.HostConstraint
	6,  // 10: topo.HostConstraint.kernel_constraint:type_name -> topo.KernelParam
	7,  // 11: topo.KernelParam.bounded_integer:type_name -> topo.BoundedInteger
	2,  // 12: topo.Interface.type:type_name -> topo.Interface.InterfaceType
	18, // 13: topo.Config.env:type_name -> topo.Config.EnvEntry
	11, // 14: topo.Config.cert:type_name -> topo.CertificateCfg
	19, // 15: topo.Config.vendor_data:type_name -> google.protobuf.Any
	12, // 16: topo.CertificateCfg.self_signed:type_name -> topo.SelfSignedCertCfg
	13, // 17: topo.Node.ServicesEntry.value:type_name -> topo.Service
	8,  // 18: topo.Node.InterfacesEntry.value:type_name -> topo.Interface
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_topo_proto_init() }
func file_topo_proto_init() {
	if File_topo_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_topo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Topology); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_topo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_topo_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostConstraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_topo_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KernelParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_topo_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoundedInteger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_topo_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_topo_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_topo_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_topo_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_topo_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelfSignedCertCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_topo_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_topo_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*HostConstraint_KernelConstraint)(nil),
	}
	file_topo_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*KernelParam_BoundedInteger)(nil),
	}
	file_topo_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*Config_Data)(nil),
		(*Config_File)(nil),
	}
	file_topo_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*CertificateCfg_SelfSigned)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_topo_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_topo_proto_goTypes,
		DependencyIndexes: file_topo_proto_depIdxs,
		EnumInfos:         file_topo_proto_enumTypes,
		MessageInfos:      file_topo_proto_msgTypes,
	}.Build()
	File_topo_proto = out.File
	file_topo_proto_rawDesc = nil
	file_topo_proto_goTypes = nil
	file_topo_proto_depIdxs = nil
}
